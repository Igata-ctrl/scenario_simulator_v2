<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="raycaster_8cpp" kind="file" language="C++">
    <compoundname>raycaster.cpp</compoundname>
    <includes local="no">quaternion_operation/quaternion_operation.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iostream</includes>
    <includes refid="lidar__sensor_8hpp" local="no">simple_sensor_simulator/sensor_simulation/lidar/lidar_sensor.hpp</includes>
    <includes refid="raycaster_8hpp" local="no">simple_sensor_simulator/sensor_simulation/lidar/raycaster.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="153">
        <label>simple_sensor_simulator/sensor_simulation/lidar/lidar_sensor.hpp</label>
        <link refid="lidar__sensor_8hpp_source"/>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
      </node>
      <node id="163">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="158">
        <label>string</label>
      </node>
      <node id="156">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="157">
        <label>sensor_msgs/msg/point_cloud2.hpp</label>
      </node>
      <node id="149">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simple_sensor_simulator/src/sensor_simulation/lidar/raycaster.cpp</label>
        <link refid="raycaster_8cpp"/>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>embree3/rtcore.h</label>
      </node>
      <node id="164">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="165">
        <label>random</label>
      </node>
      <node id="150">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="167">
        <label>simple_sensor_simulator/sensor_simulation/primitives/primitive.hpp</label>
        <link refid="primitive_8hpp_source"/>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>simple_sensor_simulator/sensor_simulation/primitives/box.hpp</label>
        <link refid="box_8hpp_source"/>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>vector</label>
      </node>
      <node id="169">
        <label>utility</label>
      </node>
      <node id="160">
        <label>simple_sensor_simulator/sensor_simulation/lidar/raycaster.hpp</label>
        <link refid="raycaster_8hpp_source"/>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
      </node>
      <node id="152">
        <label>iostream</label>
      </node>
      <node id="168">
        <label>unordered_map</label>
      </node>
      <node id="151">
        <label>algorithm</label>
      </node>
      <node id="162">
        <label>pcl_conversions/pcl_conversions.h</label>
      </node>
      <node id="154">
        <label>simulation_api_schema.pb.h</label>
      </node>
      <node id="155">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesimple__sensor__simulator">simple_sensor_simulator</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quaternion_operation/quaternion_operation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simple_sensor_simulator/sensor_simulation/lidar/lidar_sensor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simple_sensor_simulator/sensor_simulation/lidar/raycaster.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesimple__sensor__simulator" kindref="compound">simple_sensor_simulator</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal">Raycaster::Raycaster()<sp/>:<sp/>primitive_ptrs_(0),<sp/>device_(nullptr),<sp/>scene_(nullptr),<sp/>engine_(seed_gen_())</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>device_<sp/>=<sp/>rtcNewDevice(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">Raycaster::Raycaster(std::string<sp/>embree_config)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">:<sp/>primitive_ptrs_(0),<sp/>device_(nullptr),<sp/>scene_(nullptr),<sp/>engine_(seed_gen_())</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>device_<sp/>=<sp/>rtcNewDevice(embree_config.c_str());</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">Raycaster::~Raycaster()<sp/>{<sp/>rtcReleaseDevice(device_);<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::msg::PointCloud2<sp/>Raycaster::raycast(</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::string<sp/>frame_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Time<sp/>&amp;<sp/>stamp,<sp/>geometry_msgs::msg::Pose<sp/>origin,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizontal_resolution,<sp/>std::vector&lt;double&gt;<sp/>vertical_angles,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizontal_angle_start,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizontal_angle_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_distance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_distance)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Quaternion&gt;<sp/>directions;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizontal_angle<sp/>=<sp/>horizontal_angle_start;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(horizontal_angle<sp/>&lt;=<sp/>(horizontal_angle_end))<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>horizontal_angle<sp/>=<sp/>horizontal_angle<sp/>+<sp/>horizontal_resolution;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vertical_angle<sp/>:<sp/>vertical_angles)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Vector3<sp/>rpy;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rpy.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rpy.y<sp/>=<sp/>vertical_angle;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rpy.z<sp/>=<sp/>horizontal_angle;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quat<sp/>=<sp/>quaternion_operation::convertEulerAngleToQuaternion(rpy);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>directions.emplace_back(quat);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raycast(frame_id,<sp/>stamp,<sp/>origin,<sp/>directions,<sp/>max_distance,<sp/>min_distance);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;<sp/>Raycaster::getDetectedObject()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detected_objects_;<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::msg::PointCloud2<sp/>Raycaster::raycast(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::string<sp/>frame_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Time<sp/>&amp;<sp/>stamp,<sp/>geometry_msgs::msg::Pose<sp/>origin,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Quaternion&gt;<sp/>directions,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_distance,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_distance)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>detected_objects_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>detected_ids<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>scene_<sp/>=<sp/>rtcNewScene(device_);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>pcl::PointCloud&lt;pcl::PointXYZI&gt;::Ptr<sp/>cloud(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pcl::PointCloud&lt;pcl::PointXYZI&gt;());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>pair<sp/>:<sp/>primitive_ptrs_)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>pair.second-&gt;addToScene(device_,<sp/>scene_);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_ids_.insert({id,<sp/>pair.first});</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>rtcCommitScene(scene_);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>RTCIntersectContext<sp/>context;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>rtcInitIntersectContext(&amp;context);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>direction<sp/>:<sp/>directions)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>RTCRayHit<sp/>rayhit;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.org_x<sp/>=<sp/>origin.position.x;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.org_y<sp/>=<sp/>origin.position.y;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.org_z<sp/>=<sp/>origin.position.z;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.tfar<sp/>=<sp/>max_distance;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.tnear<sp/>=<sp/>min_distance;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.flags<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ray_direction<sp/>=<sp/>origin.orientation<sp/>*<sp/>direction;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rotation_mat<sp/>=<sp/>quaternion_operation::getRotationMatrix(ray_direction);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>rotated_direction<sp/>=<sp/>rotation_mat<sp/>*<sp/>Eigen::Vector3d(1.0,<sp/>0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.dir_x<sp/>=<sp/>rotated_direction[0];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.dir_y<sp/>=<sp/>rotated_direction[1];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.ray.dir_z<sp/>=<sp/>rotated_direction[2];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>rayhit.hit.geomID<sp/>=<sp/>RTC_INVALID_GEOMETRY_ID;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>rtcIntersect1(scene_,<sp/>&amp;context,<sp/>&amp;rayhit);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rayhit.hit.geomID<sp/>!=<sp/>RTC_INVALID_GEOMETRY_ID)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>rayhit.ray.tfar;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3d<sp/>vector<sp/>=<sp/>quaternion_operation::getRotationMatrix(direction)<sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d(1.0,<sp/>0.0,<sp/>0.0)<sp/>*<sp/>distance;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pcl::PointXYZI<sp/>p;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>vector[0];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>vector[1];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>vector[2];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cloud-&gt;emplace_back(p);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::count(detected_ids.begin(),<sp/>detected_ids.end(),<sp/>rayhit.hit.geomID)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detected_ids.emplace_back(rayhit.hit.geomID);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>detected_ids)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>detected_objects_.emplace_back(geometry_ids_[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>sensor_msgs::msg::PointCloud2<sp/>pointcloud_msg;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>pcl::toROSMsg(*cloud,<sp/>pointcloud_msg);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>rtcReleaseScene(scene_);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>pointcloud_msg.header.frame_id<sp/>=<sp/>frame_id;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>pointcloud_msg.header.stamp<sp/>=<sp/>stamp;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pointcloud_msg;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>simple_sensor_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simple_sensor_simulator/src/sensor_simulation/lidar/raycaster.cpp"/>
  </compounddef>
</doxygen>
