<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="entity__manager_8cpp" kind="file" language="C++">
    <compoundname>entity_manager.cpp</compoundname>
    <includes refid="entity__manager_8hpp" local="no">simulation_api/entity/entity_manager.hpp</includes>
    <includes refid="helper_8hpp" local="no">simulation_api/helper/helper.hpp</includes>
    <includes refid="bounding__box_8hpp" local="no">simulation_api/math/bounding_box.hpp</includes>
    <includes refid="collision_8hpp" local="no">simulation_api/math/collision.hpp</includes>
    <includes local="no">limits</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">queue</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="4698">
        <label>simulation_api/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4699" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4701" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
      </node>
      <node id="4714">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="4755">
        <label>system_error</label>
      </node>
      <node id="4732">
        <label>functional</label>
      </node>
      <node id="4746">
        <label>awapi_accessor/accessor.hpp</label>
      </node>
      <node id="4708">
        <label>queue</label>
      </node>
      <node id="4738">
        <label>simulation_api/vehicle_model/sim_model_time_delay.hpp</label>
        <link refid="sim__model__time__delay_8hpp"/>
        <childnode refid="4735" relation="include">
        </childnode>
        <childnode refid="4736" relation="include">
        </childnode>
        <childnode refid="4737" relation="include">
        </childnode>
        <childnode refid="4739" relation="include">
        </childnode>
        <childnode refid="4706" relation="include">
        </childnode>
        <childnode refid="4708" relation="include">
        </childnode>
        <childnode refid="4741" relation="include">
        </childnode>
      </node>
      <node id="4742">
        <label>autoware_auto_msgs/msg/complex32.hpp</label>
      </node>
      <node id="4701">
        <label>limits</label>
      </node>
      <node id="4673">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="4709">
        <label>simulation_api/entity/vehicle_parameter.hpp</label>
        <link refid="vehicle__parameter_8hpp_source"/>
        <childnode refid="4710" relation="include">
        </childnode>
        <childnode refid="4707" relation="include">
        </childnode>
        <childnode refid="4711" relation="include">
        </childnode>
        <childnode refid="4712" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4668" relation="include">
        </childnode>
        <childnode refid="4713" relation="include">
        </childnode>
        <childnode refid="4714" relation="include">
        </childnode>
        <childnode refid="4715" relation="include">
        </childnode>
        <childnode refid="4716" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4655">
        <label>simulation_api/entity/entity_manager.hpp</label>
        <link refid="entity__manager_8hpp_source"/>
        <childnode refid="4656" relation="include">
        </childnode>
        <childnode refid="4699" relation="include">
        </childnode>
        <childnode refid="4757" relation="include">
        </childnode>
        <childnode refid="4657" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4764" relation="include">
        </childnode>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4743" relation="include">
        </childnode>
        <childnode refid="4744" relation="include">
        </childnode>
        <childnode refid="4745" relation="include">
        </childnode>
        <childnode refid="4766" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4707" relation="include">
        </childnode>
        <childnode refid="4727" relation="include">
        </childnode>
        <childnode refid="4767" relation="include">
        </childnode>
        <childnode refid="4711" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4768" relation="include">
        </childnode>
        <childnode refid="4677" relation="include">
        </childnode>
        <childnode refid="4769" relation="include">
        </childnode>
        <childnode refid="4770" relation="include">
        </childnode>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4754" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4771" relation="include">
        </childnode>
        <childnode refid="4772" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4703">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="4731">
        <label>behaviortree_cpp_v3/loggers/bt_cout_logger.h</label>
      </node>
      <node id="4717">
        <label>simulation_api/behavior/vehicle/lane_change_action.hpp</label>
        <link refid="lane__change__action_8hpp_source"/>
        <childnode refid="4661" relation="include">
        </childnode>
        <childnode refid="4709" relation="include">
        </childnode>
        <childnode refid="4718" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4726" relation="include">
        </childnode>
        <childnode refid="4728" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4676">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="4723">
        <label>openscenario_msgs/msg/waypoints_array.hpp</label>
      </node>
      <node id="4688">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="4775">
        <label>openscenario_msgs/msg/lanelet_pose.hpp</label>
      </node>
      <node id="4726">
        <label>openscenario_msgs/msg/entity_trajectory.hpp</label>
      </node>
      <node id="4680">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="4769">
        <label>tf2_ros/static_transform_broadcaster.h</label>
      </node>
      <node id="4776">
        <label>openscenario_msgs/msg/action_status.hpp</label>
      </node>
      <node id="4672">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="4712">
        <label>pugixml.hpp</label>
      </node>
      <node id="4715">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="4667">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="4710">
        <label>openscenario_msgs.pb.h</label>
      </node>
      <node id="4659">
        <label>simulation_api/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4697" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4730">
        <label>simulation_api/behavior/vehicle/behavior_tree.hpp</label>
        <link refid="vehicle_2behavior__tree_8hpp_source"/>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4723" relation="include">
        </childnode>
        <childnode refid="4724" relation="include">
        </childnode>
        <childnode refid="4666" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4731" relation="include">
        </childnode>
        <childnode refid="4732" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
      </node>
      <node id="4702">
        <label>simulation_api/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="4703" relation="include">
        </childnode>
        <childnode refid="4704" relation="include">
        </childnode>
        <childnode refid="4705" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4711">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="4778">
        <label>cmath</label>
      </node>
      <node id="4705">
        <label>cassert</label>
      </node>
      <node id="4754">
        <label>stdexcept</label>
      </node>
      <node id="4736">
        <label>eigen3/Eigen/LU</label>
      </node>
      <node id="4767">
        <label>openscenario_msgs/msg/entity_status_with_trajectory_array.hpp</label>
      </node>
      <node id="4664">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="4729">
        <label>behaviortree_cpp_v3/bt_factory.h</label>
      </node>
      <node id="4694">
        <label>string</label>
      </node>
      <node id="4724">
        <label>openscenario_msgs/msg/obstacle.hpp</label>
      </node>
      <node id="4684">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="4765">
        <label>simulation_api/traffic/traffic_module_base.hpp</label>
        <link refid="traffic__module__base_8hpp_source"/>
      </node>
      <node id="4743">
        <label>autoware_auto_msgs/msg/vehicle_control_command.hpp</label>
      </node>
      <node id="4692">
        <label>map</label>
      </node>
      <node id="4749">
        <label>tf2/utils.h</label>
      </node>
      <node id="4654">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_api/src/entity/entity_manager.cpp</label>
        <link refid="entity__manager_8cpp"/>
        <childnode refid="4655" relation="include">
        </childnode>
        <childnode refid="4773" relation="include">
        </childnode>
        <childnode refid="4779" relation="include">
        </childnode>
        <childnode refid="4786" relation="include">
        </childnode>
        <childnode refid="4701" relation="include">
        </childnode>
        <childnode refid="4716" relation="include">
        </childnode>
        <childnode refid="4754" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4708" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
      </node>
      <node id="4707">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="4671">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="4687">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="4721">
        <label>simulation_api/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="4661" relation="include">
        </childnode>
        <childnode refid="4722" relation="include">
        </childnode>
        <childnode refid="4666" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4700" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
      </node>
      <node id="4658">
        <label>simulation_api/entity/entity_base.hpp</label>
        <link refid="entity__base_8hpp_source"/>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4707" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4708" relation="include">
        </childnode>
      </node>
      <node id="4677">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="4700">
        <label>exception</label>
      </node>
      <node id="4761">
        <label>simulation_api/behavior/pedestrian/follow_lane_action.hpp</label>
        <link refid="pedestrian_2follow__lane__action_8hpp_source"/>
        <childnode refid="4762" relation="include">
        </childnode>
        <childnode refid="4758" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4728" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4783">
        <label>boost/geometry/geometries/point_xy.hpp</label>
      </node>
      <node id="4744">
        <label>autoware_auto_msgs/msg/vehicle_kinematic_state.hpp</label>
      </node>
      <node id="4780">
        <label>boost/assert.hpp</label>
      </node>
      <node id="4737">
        <label>simulation_api/vehicle_model/sim_model_interface.hpp</label>
        <link refid="sim__model__interface_8hpp"/>
        <childnode refid="4735" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
      </node>
      <node id="4766">
        <label>boost/any.hpp</label>
      </node>
      <node id="4675">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="4727">
        <label>openscenario_msgs/msg/driver_model.hpp</label>
      </node>
      <node id="4668">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="4670">
        <label>simulation_api/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
      </node>
      <node id="4661">
        <label>simulation_api/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="4662" relation="include">
        </childnode>
        <childnode refid="4664" relation="include">
        </childnode>
        <childnode refid="4665" relation="include">
        </childnode>
        <childnode refid="4666" relation="include">
        </childnode>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4668" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4686">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="4685">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="4784">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="4665">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="4719">
        <label>behaviortree_cpp_v3/action_node.h</label>
      </node>
      <node id="4760">
        <label>simulation_api/behavior/pedestrian/behavior_tree.hpp</label>
        <link refid="pedestrian_2behavior__tree_8hpp_source"/>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4761" relation="include">
        </childnode>
        <childnode refid="4763" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4666" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4731" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4732" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4786">
        <label>simulation_api/math/collision.hpp</label>
        <link refid="collision_8hpp_source"/>
        <childnode refid="4779" relation="include">
        </childnode>
        <childnode refid="4707" relation="include">
        </childnode>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4683">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="4666">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="4772">
        <label>typeinfo</label>
      </node>
      <node id="4753">
        <label>future</label>
      </node>
      <node id="4725">
        <label>boost/algorithm/clamp.hpp</label>
      </node>
      <node id="4758">
        <label>simulation_api/entity/pedestrian_parameter.hpp</label>
        <link refid="pedestrian__parameter_8hpp_source"/>
        <childnode refid="4712" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4668" relation="include">
        </childnode>
        <childnode refid="4713" relation="include">
        </childnode>
        <childnode refid="4714" relation="include">
        </childnode>
        <childnode refid="4715" relation="include">
        </childnode>
        <childnode refid="4709" relation="include">
        </childnode>
        <childnode refid="4759" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4716" relation="include">
        </childnode>
      </node>
      <node id="4722">
        <label>openscenario_msgs/msg/catmull_rom_spline.hpp</label>
      </node>
      <node id="4779">
        <label>simulation_api/math/bounding_box.hpp</label>
        <link refid="bounding__box_8hpp_source"/>
        <childnode refid="4707" relation="include">
        </childnode>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4780" relation="include">
        </childnode>
        <childnode refid="4781" relation="include">
        </childnode>
        <childnode refid="4782" relation="include">
        </childnode>
        <childnode refid="4783" relation="include">
        </childnode>
        <childnode refid="4784" relation="include">
        </childnode>
        <childnode refid="4785" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4773">
        <label>simulation_api/helper/helper.hpp</label>
        <link refid="helper_8hpp_source"/>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4774" relation="include">
        </childnode>
        <childnode refid="4775" relation="include">
        </childnode>
        <childnode refid="4776" relation="include">
        </childnode>
        <childnode refid="4777" relation="include">
        </childnode>
        <childnode refid="4706" relation="include">
        </childnode>
        <childnode refid="4778" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4663">
        <label>vector</label>
      </node>
      <node id="4747">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="4763">
        <label>simulation_api/behavior/pedestrian/walk_straight_action.hpp</label>
        <link refid="walk__straight__action_8hpp"/>
        <childnode refid="4762" relation="include">
        </childnode>
        <childnode refid="4758" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4728" relation="include">
        </childnode>
        <childnode refid="4729" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4745">
        <label>autoware_auto_msgs/msg/vehicle_state_command.hpp</label>
      </node>
      <node id="4695">
        <label>utility</label>
      </node>
      <node id="4716">
        <label>sstream</label>
      </node>
      <node id="4762">
        <label>simulation_api/behavior/pedestrian/pedestrian_action_node.hpp</label>
        <link refid="pedestrian__action__node_8hpp_source"/>
        <childnode refid="4719" relation="include">
        </childnode>
        <childnode refid="4758" relation="include">
        </childnode>
        <childnode refid="4720" relation="include">
        </childnode>
        <childnode refid="4759" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
      </node>
      <node id="4740">
        <label>math.h</label>
      </node>
      <node id="4690">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="4748">
        <label>sys/wait.h</label>
      </node>
      <node id="4752">
        <label>cstdlib</label>
      </node>
      <node id="4682">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="4713">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="4734">
        <label>simulation_api/vehicle_model/sim_model_ideal.hpp</label>
        <link refid="sim__model__ideal_8hpp"/>
        <childnode refid="4735" relation="include">
        </childnode>
        <childnode refid="4736" relation="include">
        </childnode>
        <childnode refid="4737" relation="include">
        </childnode>
        <childnode refid="4706" relation="include">
        </childnode>
      </node>
      <node id="4706">
        <label>iostream</label>
      </node>
      <node id="4679">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="4741">
        <label>deque</label>
      </node>
      <node id="4656">
        <label>simulation_api/entity/ego_entity.hpp</label>
        <link refid="ego__entity_8hpp_source"/>
        <childnode refid="4657" relation="include">
        </childnode>
        <childnode refid="4734" relation="include">
        </childnode>
        <childnode refid="4738" relation="include">
        </childnode>
        <childnode refid="4742" relation="include">
        </childnode>
        <childnode refid="4743" relation="include">
        </childnode>
        <childnode refid="4744" relation="include">
        </childnode>
        <childnode refid="4745" relation="include">
        </childnode>
        <childnode refid="4746" relation="include">
        </childnode>
        <childnode refid="4747" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4712" relation="include">
        </childnode>
        <childnode refid="4748" relation="include">
        </childnode>
        <childnode refid="4749" relation="include">
        </childnode>
        <childnode refid="4750" relation="include">
        </childnode>
        <childnode refid="4751" relation="include">
        </childnode>
        <childnode refid="4752" relation="include">
        </childnode>
        <childnode refid="4753" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4754" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4755" relation="include">
        </childnode>
        <childnode refid="4756" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4693">
        <label>unordered_map</label>
      </node>
      <node id="4674">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="4768">
        <label>tf2/LinearMath/Quaternion.h</label>
      </node>
      <node id="4720">
        <label>simulation_api/behavior/action_node.hpp</label>
        <link refid="action__node_8hpp_source"/>
        <childnode refid="4719" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4721" relation="include">
        </childnode>
        <childnode refid="4658" relation="include">
        </childnode>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4723" relation="include">
        </childnode>
        <childnode refid="4724" relation="include">
        </childnode>
        <childnode refid="4725" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
      </node>
      <node id="4728">
        <label>behaviortree_cpp_v3/behavior_tree.h</label>
      </node>
      <node id="4691">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="4764">
        <label>simulation_api/traffic/traffic_sink.hpp</label>
        <link refid="traffic__sink_8hpp"/>
        <childnode refid="4765" relation="include">
        </childnode>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4732" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4681">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="4689">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="4751">
        <label>chrono</label>
      </node>
      <node id="4735">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="4785">
        <label>boost/geometry/algorithms/disjoint.hpp</label>
      </node>
      <node id="4669">
        <label>boost/optional.hpp</label>
      </node>
      <node id="4770">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
      <node id="4739">
        <label>simulation_api/vehicle_model/sim_model_util.hpp</label>
        <link refid="sim__model__util_8hpp_source"/>
        <childnode refid="4740" relation="include">
        </childnode>
      </node>
      <node id="4774">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="4678">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="4782">
        <label>boost/geometry/geometries/linestring.hpp</label>
      </node>
      <node id="4756">
        <label>thread</label>
      </node>
      <node id="4781">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="4771">
        <label>type_traits</label>
      </node>
      <node id="4657">
        <label>simulation_api/entity/vehicle_entity.hpp</label>
        <link refid="vehicle__entity_8hpp_source"/>
        <childnode refid="4658" relation="include">
        </childnode>
        <childnode refid="4709" relation="include">
        </childnode>
        <childnode refid="4717" relation="include">
        </childnode>
        <childnode refid="4730" relation="include">
        </childnode>
        <childnode refid="4733" relation="include">
        </childnode>
        <childnode refid="4723" relation="include">
        </childnode>
        <childnode refid="4727" relation="include">
        </childnode>
        <childnode refid="4711" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4712" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4733">
        <label>simulation_api/behavior/route_planner.hpp</label>
        <link refid="route__planner_8hpp_source"/>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4708" relation="include">
        </childnode>
      </node>
      <node id="4750">
        <label>algorithm</label>
      </node>
      <node id="4759">
        <label>openscenario_msgs/msg/pedestrian_parameters.hpp</label>
      </node>
      <node id="4699">
        <label>simulation_api/entity/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4700" relation="include">
        </childnode>
      </node>
      <node id="4704">
        <label>stdio.h</label>
      </node>
      <node id="4697">
        <label>simulation_api/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="4670" relation="include">
        </childnode>
        <childnode refid="4698" relation="include">
        </childnode>
        <childnode refid="4702" relation="include">
        </childnode>
        <childnode refid="4699" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4701" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
        <childnode refid="4706" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
      </node>
      <node id="4757">
        <label>simulation_api/entity/pedestrian_entity.hpp</label>
        <link refid="pedestrian__entity_8hpp_source"/>
        <childnode refid="4658" relation="include">
        </childnode>
        <childnode refid="4758" relation="include">
        </childnode>
        <childnode refid="4760" relation="include">
        </childnode>
        <childnode refid="4733" relation="include">
        </childnode>
        <childnode refid="4759" relation="include">
        </childnode>
        <childnode refid="4712" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
      </node>
      <node id="4777">
        <label>simulation_api_schema.pb.h</label>
      </node>
      <node id="4696">
        <label>memory</label>
      </node>
      <node id="4660">
        <label>simulation_api/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="4661" relation="include">
        </childnode>
        <childnode refid="4670" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4673" relation="include">
        </childnode>
        <childnode refid="4674" relation="include">
        </childnode>
        <childnode refid="4675" relation="include">
        </childnode>
        <childnode refid="4676" relation="include">
        </childnode>
        <childnode refid="4677" relation="include">
        </childnode>
        <childnode refid="4678" relation="include">
        </childnode>
        <childnode refid="4679" relation="include">
        </childnode>
        <childnode refid="4680" relation="include">
        </childnode>
        <childnode refid="4681" relation="include">
        </childnode>
        <childnode refid="4682" relation="include">
        </childnode>
        <childnode refid="4683" relation="include">
        </childnode>
        <childnode refid="4684" relation="include">
        </childnode>
        <childnode refid="4685" relation="include">
        </childnode>
        <childnode refid="4686" relation="include">
        </childnode>
        <childnode refid="4687" relation="include">
        </childnode>
        <childnode refid="4688" relation="include">
        </childnode>
        <childnode refid="4689" relation="include">
        </childnode>
        <childnode refid="4690" relation="include">
        </childnode>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
      </node>
      <node id="4718">
        <label>simulation_api/behavior/vehicle/vehicle_action_node.hpp</label>
        <link refid="vehicle__action__node_8hpp_source"/>
        <childnode refid="4719" relation="include">
        </childnode>
        <childnode refid="4709" relation="include">
        </childnode>
        <childnode refid="4720" relation="include">
        </childnode>
        <childnode refid="4721" relation="include">
        </childnode>
        <childnode refid="4726" relation="include">
        </childnode>
        <childnode refid="4723" relation="include">
        </childnode>
        <childnode refid="4724" relation="include">
        </childnode>
        <childnode refid="4727" relation="include">
        </childnode>
        <childnode refid="4711" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
      <node id="4662">
        <label>simulation_api/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="4663" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesimulation__api">simulation_api</innernamespace>
    <innernamespace refid="namespacesimulation__api_1_1entity">simulation_api::entity</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/entity/entity_manager.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/helper/helper.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/math/bounding_box.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/math/collision.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesimulation__api" kindref="compound">simulation_api</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">entity</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::isStopping(</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="35"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(status-&gt;action_status.twist.linear.x)<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon();</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::setDriverModel(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::DriverModel<sp/>&amp;<sp/>model)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).setDriverModel(model);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pedestrian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>EntityManager::toMapPose(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>lanelet_pose)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="64"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;toMapPose(lanelet_pose).pose;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;hdmap_utils::HdMapUtils&gt;<sp/>EntityManager::getHdmapUtils()</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::setVerbose(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>verbose_<sp/>=<sp/>verbose;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each<sp/>:<sp/>entities_)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(each.second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(each.second).setVerbose(verbose);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(each.second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(each.second).setVerbose(verbose);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(each.second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(each.second).setVerbose(verbose);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::isEgo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEntityType(name).type<sp/>==<sp/>openscenario_msgs::msg::EntityType::EGO;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">std::size_t<sp/>EntityManager::getNumberOfEgo()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="95"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::count_if(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::begin(entities_),<sp/>std::end(entities_),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>each.second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">boost::optional&lt;openscenario_msgs::msg::LaneletPose&gt;<sp/>EntityManager::getLaneletPose(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status-&gt;lanelet_pose;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toLaneletPose(status-&gt;pose);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">boost::optional&lt;double&gt;<sp/>EntityManager::getDistanceToCrosswalk(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>target_crosswalk_id)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getWaypoints(name).waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classsimulation__api_1_1math_1_1CatmullRomSpline" kindref="compound">simulation_api::math::CatmullRomSpline</ref><sp/>spline(getWaypoints(name).waypoints);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>polygon<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLaneletPolygon(target_crosswalk_id);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spline.getCollisionPointIn2D(polygon);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">boost::optional&lt;double&gt;<sp/>EntityManager::getSValueInRoute(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_pose<sp/>=<sp/>getLaneletPose(name);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lanelet_pose)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>route)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>lanelet_pose-&gt;lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s<sp/>+<sp/>lanelet_pose-&gt;s;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s<sp/>+<sp/>hdmap_utils_ptr_-&gt;getLaneletLength(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">boost::optional&lt;double&gt;<sp/>EntityManager::getDistanceToStopLine(</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>target_stop_line_id)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getWaypoints(name).waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="classsimulation__api_1_1math_1_1CatmullRomSpline" kindref="compound">simulation_api::math::CatmullRomSpline</ref><sp/>spline(getWaypoints(name).waypoints);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>polygon<sp/>=<sp/>hdmap_utils_ptr_-&gt;getStopLinePolygon(target_stop_line_id);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spline.getCollisionPointIn2D(polygon);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::requestAssignRoute(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;openscenario_msgs::msg::LaneletPose&gt;<sp/>&amp;<sp/>waypoints)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).requestAssignRoute(waypoints);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).requestAssignRoute(waypoints);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).requestAssignRoute(waypoints);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::requestAcquirePosition(</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>lanelet_pose)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).requestAcquirePosition(lanelet_pose);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).requestAcquirePosition(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*hdmap_utils_ptr_).toMapPose(lanelet_pose));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).requestAcquirePosition(lanelet_pose);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::requestLaneChange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>to_lanelet_id)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entity<sp/>=<sp/>reference(name);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(entity).requestLaneChange(to_lanelet_id);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>what<sp/>{};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;From<sp/>scenario,<sp/>a<sp/>lane<sp/>change<sp/>was<sp/>requested<sp/>to<sp/>Ego<sp/>type<sp/>entity<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;.<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>general,<sp/>such<sp/>a<sp/>request<sp/>is<sp/>an<sp/>error,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;since<sp/>Ego<sp/>cars<sp/>make<sp/>autonomous<sp/>decisions<sp/>about<sp/>everything<sp/>but<sp/>their<sp/>destination.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(what.str());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::requestWalkStraight(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entity<sp/>=<sp/>reference(name);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(entity).requestWalkStraight();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;target<sp/>of<sp/>requestWalkStaraight<sp/>function<sp/>should<sp/>be<sp/>pedestrian.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::requestLaneChange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Direction<sp/>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/>Direction::LEFT)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLaneChangeableLenletId(</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.lanelet_id,<sp/></highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestLaneChange(name,<sp/>target.get());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/>Direction::RIGHT)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLaneChangeableLenletId(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.lanelet_id,<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestLaneChange(name,<sp/>target.get());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">boost::optional&lt;double&gt;<sp/><ref refid="classsimulation__api_1_1entity_1_1EntityManager_1a8c247b52f48aa8ffa959c288e842fd15" kindref="member">EntityManager::getBoundingBoxDistance</ref>(</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox0<sp/>=<sp/>getBoundingBox(from);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose0<sp/>=<sp/>getMapPose(from);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox1<sp/>=<sp/>getBoundingBox(to);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose1<sp/>=<sp/>getMapPose(to);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::getPolygonDistance(pose0,<sp/>bbox0,<sp/>pose1,<sp/>bbox1);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">boost::optional&lt;double&gt;<sp/>EntityManager::getLongitudinalDistance(</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_distance)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityStatusSetted(from)<sp/>||<sp/>!entityStatusSetted(to))<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_status<sp/>=<sp/>getEntityStatus(from);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_status<sp/>&amp;&amp;<sp/>to_status)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_status-&gt;lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_status-&gt;lanelet_pose.s,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_status-&gt;lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_status-&gt;lanelet_pose.s);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(distance<sp/>&amp;&amp;<sp/>distance<sp/>&lt;=<sp/>max_distance)<sp/>?<sp/>distance<sp/>:<sp/>boost::none;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">geometry_msgs::msg::Pose<sp/>EntityManager::getMapPose(</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>entity_name)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(entity_name);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>status<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>entity_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>in<sp/>getMapPose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status-&gt;pose;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">geometry_msgs::msg::Pose<sp/>EntityManager::getMapPose(</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>reference_entity_name,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>relative_pose)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref_status<sp/>=<sp/>getEntityStatus(reference_entity_name);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ref_status)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>status<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>reference_entity_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>in<sp/>getMapPose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>tf2::Transform<sp/>ref_transfrom,<sp/>relative_transform;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>tf2::fromMsg(ref_status-&gt;pose,<sp/>ref_transfrom);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>tf2::fromMsg(relative_pose,<sp/>relative_transform);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>ret;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>tf2::toMsg(ref_transfrom<sp/>*<sp/>relative_transform,<sp/>ret);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">geometry_msgs::msg::Pose<sp/>EntityManager::getRelativePose(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_status<sp/>=<sp/>getEntityStatus(from);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from_status)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>status<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>from<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>in<sp/>getRelativePose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to_status)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>status<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>to<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>in<sp/>getRelativePose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRelativePose(from_status-&gt;pose,<sp/>to_status-&gt;pose);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">geometry_msgs::msg::Pose<sp/>EntityManager::getRelativePose(</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_status<sp/>=<sp/>getEntityStatus(from);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from_status)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>status<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>from<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>in<sp/>getRelativePose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRelativePose(from_status-&gt;pose,<sp/>to);</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">geometry_msgs::msg::Pose<sp/>EntityManager::getRelativePose(</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>from,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to_status)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>get<sp/>status<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>to<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>entity<sp/>in<sp/>getRelativePose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRelativePose(from,<sp/>to_status-&gt;pose);</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">geometry_msgs::msg::Pose<sp/>EntityManager::getRelativePose(</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>from,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>to)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="372"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Transform<sp/>from_translation;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>from_translation.translation.x<sp/>=<sp/>from.position.x;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>from_translation.translation.y<sp/>=<sp/>from.position.y;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>from_translation.translation.z<sp/>=<sp/>from.position.z;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>from_translation.rotation<sp/>=<sp/>from.orientation;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>tf2::Transform<sp/>from_tf;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2::fromMsg(from_translation,<sp/>from_tf);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Transform<sp/>to_translation;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>to_translation.translation.x<sp/>=<sp/>to.position.x;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>to_translation.translation.y<sp/>=<sp/>to.position.y;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>to_translation.translation.z<sp/>=<sp/>to.position.z;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>to_translation.rotation<sp/>=<sp/>to.orientation;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>tf2::Transform<sp/>to_tf;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2::fromMsg(to_translation,<sp/>to_tf);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>tf2::Transform<sp/>tf_delta<sp/>=<sp/>from_tf.inverse()<sp/>*<sp/>to_tf;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>ret;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>tf2::toMsg(tf_delta,<sp/>ret);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;openscenario_msgs::msg::VehicleParameters&gt;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">EntityManager::getVehicleParameters(</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="412"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).parameters;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).parameters;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::isInLanelet(</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>lanelet_id,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityStatusSetted(name))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status-&gt;lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;lanelet_pose.lanelet_id<sp/>==<sp/>lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist0<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id,<sp/>l,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.s);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist1<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.s,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id,<sp/>0);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist0)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist0.get()<sp/>&lt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist1)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist1.get()<sp/>&lt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>EntityManager::getEntityNames()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="468"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names<sp/>{};</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each<sp/>:<sp/>entities_)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>names.push_back(each.first);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::setEntityStatus(</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>status.name<sp/>=<sp/>name;<sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>UGLY<sp/>CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).setStatus(status);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).setStatus(status);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).setStatus(status);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;openscenario_msgs::msg::EntityStatus&gt;<sp/>EntityManager::getEntityStatus(</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="500"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status_msg;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg<sp/>=<sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getStatus();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg<sp/>=<sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).getStatus();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg<sp/>=<sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).getStatus();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>status_msg.bounding_box<sp/>=<sp/>getBoundingBox(name);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>status_msg.action_status.current_action<sp/>=<sp/>getCurrentAction(name);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(getEntityType(name).type)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::EGO:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.EGO;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::VEHICLE:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.VEHICLE;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN:</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.PEDESTRIAN;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>status_msg.time<sp/>=<sp/>current_time_;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>status_msg.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_msg;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::checkCollision(</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name0,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name1)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name0<sp/>==<sp/>name1)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityStatusSetted(name0))<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityStatusSetted(name1))<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status0<sp/>=<sp/>getEntityStatus(name0);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status0)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>calculate<sp/>map<sp/>pose<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name0);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status1<sp/>=<sp/>getEntityStatus(name1);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status1)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>calculate<sp/>map<sp/>pose<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name1);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox0<sp/>=<sp/>getBoundingBox(name0);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox1<sp/>=<sp/>getBoundingBox(name1);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>simulation_api::math::checkCollision2D(status0-&gt;pose,<sp/>bbox0,<sp/>status1-&gt;pose,<sp/>bbox1);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::BoundingBox<sp/>EntityManager::getBoundingBox(</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="564"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>bounding<sp/>box<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getBoundingBox();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).getBoundingBox();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).getBoundingBox();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>bounding<sp/>box<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">boost::optional&lt;openscenario_msgs::msg::Obstacle&gt;<sp/>EntityManager::getObstacle(</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>obstacle<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getObstacle();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>obstacle<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">openscenario_msgs::msg::WaypointsArray<sp/>EntityManager::getWaypoints(</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>wayoints<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getWaypoints();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).getWaypoints();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::WaypointsArray();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>waypoints<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">boost::optional&lt;double&gt;<sp/>EntityManager::getLinearJerk(</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="624"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;entity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getLinearJerk();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).getLinearJerk();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).getLinearJerk();</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::entityStatusSetted(</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="644"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).statusSetted();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).statusSetted();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).statusSetted();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::setTargetSpeed(</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_speed,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>continuous)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entity<sp/>=<sp/>reference(name);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(entity).setTargetSpeed(target_speed,<sp/>continuous);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(entity).setTargetSpeed(target_speed,<sp/>continuous);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(entity).setTargetSpeed(target_speed,<sp/>continuous);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>what<sp/>{};</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>typed<sp/>with<sp/>the<sp/>unexpected<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/>entity.type().name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(what.str());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>EntityManager::getRouteLanelets(</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizon)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entity<sp/>=<sp/>reference(name);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(entity).getRouteLanelets(horizon);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(entity).getRouteLanelets(horizon);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entity.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(entity).getRouteLanelets(horizon);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>what<sp/>{};</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Entity<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>typed<sp/>with<sp/>the<sp/>unexpected<sp/>type<sp/>&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>what<sp/>&lt;&lt;<sp/>entity.type().name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(what.str());</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>EntityManager::getConflictingEntityOnRouteLanelets(</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizon)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(</highlight><highlight class="stringliteral">&quot;entity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>route<sp/>=<sp/>getRouteLanelets(name,<sp/>horizon);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;getConflictingCrosswalkIds(route);</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EntityManager::getStepTime()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>step_time_;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EntityManager::getCurrentTime()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_time_;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::update(</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_time,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>std::chrono::system_clock::time_point<sp/>start,<sp/>end;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>step_time_<sp/>=<sp/>step_time;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>traffic_light_manager_ptr_-&gt;update(step_time_);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>current_time_<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose_)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--------------------------<sp/>UPDATE<sp/>--------------------------&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getNumberOfEgo()<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(</highlight><highlight class="stringliteral">&quot;multi<sp/>ego<sp/>simulation<sp/>does<sp/>not<sp/>support<sp/>yet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>setVerbose(verbose_);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_list<sp/>=<sp/>getEntityTypeList();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityStatus&gt;<sp/>all_status;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.begin();<sp/>it<sp/>!=<sp/>entities_.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose_)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;update<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>behavior&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).setEntityTypeList(type_list);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).onUpdate(current_time,<sp/>step_time);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).statusSetted())<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getStatus();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_status[boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).name]<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).setEntityTypeList(type_list);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).onUpdate(current_time,<sp/>step_time);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).statusSetted())<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).getStatus();</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_status[boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).name]<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).setEntityTypeList(type_list);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).onUpdate(current_time,<sp/>step_time);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).statusSetted())<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).getStatus();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_status[boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).name]<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.begin();<sp/>it<sp/>!=<sp/>entities_.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;VehicleEntity<sp/>&amp;&gt;(it-&gt;second).setOtherStatus(all_status);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;EgoEntity<sp/>&amp;&gt;(it-&gt;second).setOtherStatus(all_status);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::any_cast&lt;PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).setOtherStatus(all_status);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity_type_list<sp/>=<sp/>getEntityTypeList();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatusWithTrajectoryArray<sp/>status_array_msg;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>all_status)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityStatusWithTrajectory<sp/>status_with_traj;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status_msg<sp/>=<sp/>status.second;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.name<sp/>=<sp/>status.first;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.bounding_box<sp/>=<sp/>getBoundingBox(status.first);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.action_status.current_action<sp/>=<sp/>getCurrentAction(status.first);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(getEntityType(status.first).type)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::EGO:</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.EGO;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::VEHICLE:</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.VEHICLE;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN:</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.PEDESTRIAN;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.waypoint<sp/>=<sp/>getWaypoints(status.first);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obstacle<sp/>=<sp/>getObstacle(status.first);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obstacle)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_with_traj.obstacle<sp/>=<sp/>obstacle.get();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_with_traj.obstacle_find<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_with_traj.obstacle_find<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.status<sp/>=<sp/>status_msg;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.name<sp/>=<sp/>status.first;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.time<sp/>=<sp/>current_time<sp/>+<sp/>step_time;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>status_array_msg.data.emplace_back(status_with_traj);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>entity_status_array_pub_ptr_-&gt;publish(status_array_msg);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end<sp/>-<sp/>start).count();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose_)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;elapsed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elapsed<sp/>/<sp/>1000<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>secands<sp/>in<sp/>update<sp/>function.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::broadcastTransform(</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::PoseStamped<sp/>&amp;<sp/>pose,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>static_transform)</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::TransformStamped<sp/>transform_stamped;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.header.stamp<sp/>=<sp/>pose.header.stamp;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.child_frame_id<sp/>=<sp/>pose.header.frame_id;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.translation.x<sp/>=<sp/>pose.pose.position.x;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.translation.y<sp/>=<sp/>pose.pose.position.y;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.translation.z<sp/>=<sp/>pose.pose.position.z;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.rotation<sp/>=<sp/>pose.pose.orientation;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_transform)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>broadcaster_.sendTransform(transform_stamped);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>base_link_broadcaster_.sendTransform(transform_stamped);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::reachPosition(</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>target_name,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="846"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(target_name);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status<sp/>&amp;&amp;<sp/>reachPosition(name,<sp/>status-&gt;pose,<sp/>tolerance);</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::reachPosition(</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>target_pose,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="855"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error<sp/>occurs<sp/>while<sp/>getting<sp/>entity<sp/>stauts,<sp/>target<sp/>entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose<sp/>=<sp/>status-&gt;pose;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>std::sqrt(</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pow(pose.position.x<sp/>-<sp/>target_pose.position.x,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pow(pose.position.y<sp/>-<sp/>target_pose.position.y,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pow(pose.position.z<sp/>-<sp/>target_pose.position.z,<sp/>2));</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distance<sp/>&lt;<sp/>tolerance;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::reachPosition(</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>lanelet_id,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="878"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>lanelet_pose;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.lanelet_id<sp/>=<sp/>lanelet_id;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_pose<sp/>=<sp/>hdmap_utils_ptr_-&gt;toMapPose(lanelet_pose);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reachPosition(name,<sp/>target_pose.pose,<sp/>tolerance);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::broadcastBaseLinkTransform()</highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(const<sp/>auto<sp/>&amp;<sp/>name<sp/>:<sp/>getEntityNames())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(getEntityType(name).type<sp/>==<sp/>openscenario_msgs::msg::EntityType::EGO)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(status)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::PoseStamped<sp/>pose;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.pose<sp/>=<sp/>status-&gt;pose;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.stamp<sp/>=<sp/>clock_ptr_-&gt;now();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.frame_id<sp/>=<sp/>&quot;base_link&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>broadcastTransform(pose,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::broadcastEntityTransform()</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names<sp/>=<sp/>getEntityNames();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>names.begin();<sp/>it<sp/>!=<sp/>names.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entityStatusSetted(*it))<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(*it);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::PoseStamped<sp/>pose;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.pose<sp/>=<sp/>status-&gt;pose;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.stamp<sp/>=<sp/>clock_ptr_-&gt;now();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.frame_id<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>broadcastTransform(pose);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>broadcastBaseLinkTransform();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;double&gt;<sp/>EntityManager::getStandStillDuration(</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="928"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getStandStillDuration();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).getStandStillDuration();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).getStandStillDuration();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;entity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>EntityManager::getCurrentAction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="943"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleEntity<sp/>&amp;&gt;(it-&gt;second).getCurrentAction();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EgoEntity<sp/>&amp;&gt;(it-&gt;second).getCurrentAction();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::any_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PedestrianEntity<sp/>&amp;&gt;(it-&gt;second).getCurrentAction();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;entity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal">openscenario_msgs::msg::EntityType<sp/>EntityManager::getEntityType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="958"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::VEHICLE;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::EGO;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsimulation__api_1_1SimulationRuntimeError" kindref="compound">simulation_api::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;entity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>std::string,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityType&gt;</highlight></codeline>
<codeline lineno="981"><highlight class="normal">EntityManager::getEntityTypeList()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="982"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityType&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.begin();<sp/>it<sp/>!=<sp/>entities_.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VehicleEntity))<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::VEHICLE;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[it-&gt;first]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(EgoEntity))<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::EGO;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[it-&gt;first]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(PedestrianEntity))<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[it-&gt;first]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>simulation_api</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_api/src/entity/entity_manager.cpp"/>
  </compounddef>
</doxygen>
