<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="route__planner_8cpp" kind="file" language="C++">
    <compoundname>route_planner.cpp</compoundname>
    <includes refid="route__planner_8hpp" local="no">simulation_api/behavior/route_planner.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includes local="no">queue</includes>
    <incdepgraph>
      <node id="3958">
        <label>queue</label>
      </node>
      <node id="3934">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="3937">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="3949">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="3941">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="3933">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="3928">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="3925">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="3955">
        <label>string</label>
      </node>
      <node id="3945">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="3953">
        <label>map</label>
      </node>
      <node id="3932">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="3948">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="3919">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_api/src/behavior/route_planner.cpp</label>
        <link refid="route__planner_8cpp"/>
        <childnode refid="3920" relation="include">
        </childnode>
        <childnode refid="3957" relation="include">
        </childnode>
        <childnode refid="3924" relation="include">
        </childnode>
        <childnode refid="3958" relation="include">
        </childnode>
      </node>
      <node id="3938">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="3936">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="3929">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="3931">
        <label>simulation_api/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
      </node>
      <node id="3922">
        <label>simulation_api/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="3923" relation="include">
        </childnode>
        <childnode refid="3925" relation="include">
        </childnode>
        <childnode refid="3926" relation="include">
        </childnode>
        <childnode refid="3927" relation="include">
        </childnode>
        <childnode refid="3928" relation="include">
        </childnode>
        <childnode refid="3929" relation="include">
        </childnode>
        <childnode refid="3930" relation="include">
        </childnode>
        <childnode refid="3924" relation="include">
        </childnode>
      </node>
      <node id="3947">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="3946">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="3926">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="3944">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="3927">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="3924">
        <label>vector</label>
      </node>
      <node id="3956">
        <label>utility</label>
      </node>
      <node id="3951">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="3943">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="3940">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="3954">
        <label>unordered_map</label>
      </node>
      <node id="3935">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="3952">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="3942">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="3950">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="3930">
        <label>boost/optional.hpp</label>
      </node>
      <node id="3939">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="3920">
        <label>simulation_api/behavior/route_planner.hpp</label>
        <link refid="route__planner_8hpp_source"/>
        <childnode refid="3921" relation="include">
        </childnode>
        <childnode refid="3957" relation="include">
        </childnode>
        <childnode refid="3924" relation="include">
        </childnode>
        <childnode refid="3958" relation="include">
        </childnode>
      </node>
      <node id="3957">
        <label>memory</label>
      </node>
      <node id="3921">
        <label>simulation_api/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="3922" relation="include">
        </childnode>
        <childnode refid="3931" relation="include">
        </childnode>
        <childnode refid="3932" relation="include">
        </childnode>
        <childnode refid="3933" relation="include">
        </childnode>
        <childnode refid="3934" relation="include">
        </childnode>
        <childnode refid="3935" relation="include">
        </childnode>
        <childnode refid="3936" relation="include">
        </childnode>
        <childnode refid="3937" relation="include">
        </childnode>
        <childnode refid="3938" relation="include">
        </childnode>
        <childnode refid="3939" relation="include">
        </childnode>
        <childnode refid="3940" relation="include">
        </childnode>
        <childnode refid="3941" relation="include">
        </childnode>
        <childnode refid="3942" relation="include">
        </childnode>
        <childnode refid="3943" relation="include">
        </childnode>
        <childnode refid="3944" relation="include">
        </childnode>
        <childnode refid="3945" relation="include">
        </childnode>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3947" relation="include">
        </childnode>
        <childnode refid="3948" relation="include">
        </childnode>
        <childnode refid="3949" relation="include">
        </childnode>
        <childnode refid="3950" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
        <childnode refid="3952" relation="include">
        </childnode>
        <childnode refid="3930" relation="include">
        </childnode>
        <childnode refid="3953" relation="include">
        </childnode>
        <childnode refid="3954" relation="include">
        </childnode>
        <childnode refid="3955" relation="include">
        </childnode>
        <childnode refid="3956" relation="include">
        </childnode>
        <childnode refid="3924" relation="include">
        </childnode>
        <childnode refid="3957" relation="include">
        </childnode>
      </node>
      <node id="3923">
        <label>simulation_api/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="3924" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesimulation__api">simulation_api</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2021<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/behavior/route_planner.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesimulation__api" kindref="compound">simulation_api</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal">RoutePlanner::RoutePlanner(std::shared_ptr&lt;hdmap_utils::HdMapUtils&gt;<sp/>hdmap_utils_ptr)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>hdmap_utils_ptr_<sp/>=<sp/>hdmap_utils_ptr;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>RoutePlanner::getRouteLanelets(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>entity_lanelet_pose,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::vector&lt;openscenario_msgs::msg::LaneletPose&gt;<sp/>waypoints,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizon)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>waypoint_queue_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRouteLanelets(entity_lanelet_pose,<sp/>horizon);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>waypoint<sp/>:<sp/>waypoints)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>waypoint_queue_.push(waypoint);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRouteLanelets(entity_lanelet_pose,<sp/>waypoint_queue_.front(),<sp/>horizon);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>RoutePlanner::getRouteLanelets(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>entity_lanelet_pose,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizon)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!whole_route_)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;getFollowingLanelets(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horizon,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!waypoint_queue_.empty())<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoint_queue_.front().lanelet_id<sp/>==<sp/>entity_lanelet_pose.lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cancelGoal(entity_lanelet_pose);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdmap_utils_ptr_-&gt;isInRoute(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,<sp/>whole_route_.get()</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;getFollowingLanelets(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whole_route_.get(),<sp/>horizon,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>cancelGoal(entity_lanelet_pose);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoint_queue_.empty())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;getFollowingLanelets(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horizon,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRouteLanelets(entity_lanelet_pose,<sp/>waypoint_queue_.front(),<sp/>horizon);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>RoutePlanner::getRouteLanelets(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>entity_lanelet_pose,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>target_lanelet_pose,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>horizon)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>plan(entity_lanelet_pose,<sp/>target_lanelet_pose);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!whole_route_)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;getFollowingLanelets(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>horizon,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;getFollowingLanelets(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>whole_route_.get(),<sp/>horizon,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RoutePlanner::cancelGoal()</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>whole_route_<sp/>=<sp/>boost::none;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RoutePlanner::cancelGoal(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>entity_lanelet_pose)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoint_queue_.empty())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cancelGoal();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoint_queue_.front().lanelet_id<sp/>==<sp/>entity_lanelet_pose.lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waypoint_queue_.pop();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RoutePlanner::plan(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>entity_lanelet_pose,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>target_lanelet_pose)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_lanelet_pose.lanelet_id<sp/>==<sp/>entity_lanelet_pose.lanelet_id<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>target_lanelet_pose.s<sp/>&lt;=<sp/>entity_lanelet_pose.s)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>cancelGoal(entity_lanelet_pose);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoint_queue_.empty())<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!whole_route_)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>whole_route_<sp/>=<sp/>hdmap_utils_ptr_-&gt;getRoute(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_lanelet_pose.lanelet_id);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdmap_utils_ptr_-&gt;isInRoute(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,<sp/>whole_route_.get()</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>whole_route_<sp/>=<sp/>hdmap_utils_ptr_-&gt;getRoute(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entity_lanelet_pose.lanelet_id,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_lanelet_pose.lanelet_id);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>simulation_api</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_api/src/behavior/route_planner.cpp"/>
  </compounddef>
</doxygen>
