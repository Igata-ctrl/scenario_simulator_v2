<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="traffic__light__manager_8cpp" kind="file" language="C++">
    <compoundname>traffic_light_manager.cpp</compoundname>
    <includes refid="traffic__light__manager_8hpp" local="no">simulation_api/traffic_lights/traffic_light_manager.hpp</includes>
    <includes refid="exception_8hpp" local="no">simulation_api/entity/exception.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includes local="no">utility</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="6027">
        <label>simulation_api/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="5989" relation="include">
        </childnode>
        <childnode refid="6028" relation="include">
        </childnode>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="6030" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
      </node>
      <node id="6030">
        <label>limits</label>
      </node>
      <node id="6002">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="6032">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="6005">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="6017">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="6009">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="5987">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_api/src/traffic_lights/traffic_light_manager.cpp</label>
        <link refid="traffic__light__manager_8cpp"/>
        <childnode refid="5988" relation="include">
        </childnode>
        <childnode refid="6028" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="6001">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="5996">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="5988">
        <label>simulation_api/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="5989" relation="include">
        </childnode>
        <childnode refid="6026" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6020" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="6031">
        <label>simulation_api/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="6032" relation="include">
        </childnode>
        <childnode refid="6033" relation="include">
        </childnode>
        <childnode refid="6034" relation="include">
        </childnode>
        <childnode refid="6021" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="6034">
        <label>cassert</label>
      </node>
      <node id="5993">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="6023">
        <label>string</label>
      </node>
      <node id="6013">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="6021">
        <label>map</label>
      </node>
      <node id="6000">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="6016">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="6006">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="6029">
        <label>exception</label>
      </node>
      <node id="6004">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="5997">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="5999">
        <label>simulation_api/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
      </node>
      <node id="5990">
        <label>simulation_api/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="5991" relation="include">
        </childnode>
        <childnode refid="5993" relation="include">
        </childnode>
        <childnode refid="5994" relation="include">
        </childnode>
        <childnode refid="5995" relation="include">
        </childnode>
        <childnode refid="5996" relation="include">
        </childnode>
        <childnode refid="5997" relation="include">
        </childnode>
        <childnode refid="5998" relation="include">
        </childnode>
        <childnode refid="5992" relation="include">
        </childnode>
      </node>
      <node id="6015">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="6014">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="5994">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="6012">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="5995">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="5992">
        <label>vector</label>
      </node>
      <node id="6024">
        <label>utility</label>
      </node>
      <node id="6019">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="6011">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="6035">
        <label>iostream</label>
      </node>
      <node id="6008">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="6022">
        <label>unordered_map</label>
      </node>
      <node id="6003">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="6020">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="6010">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="6018">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="5998">
        <label>boost/optional.hpp</label>
      </node>
      <node id="6007">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="6028">
        <label>simulation_api/entity/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="6023" relation="include">
        </childnode>
        <childnode refid="6029" relation="include">
        </childnode>
      </node>
      <node id="6033">
        <label>stdio.h</label>
      </node>
      <node id="6026">
        <label>simulation_api/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="5999" relation="include">
        </childnode>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6031" relation="include">
        </childnode>
        <childnode refid="6028" relation="include">
        </childnode>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="6030" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
        <childnode refid="6035" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
      </node>
      <node id="6025">
        <label>memory</label>
      </node>
      <node id="5989">
        <label>simulation_api/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5999" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6001" relation="include">
        </childnode>
        <childnode refid="6002" relation="include">
        </childnode>
        <childnode refid="6003" relation="include">
        </childnode>
        <childnode refid="6004" relation="include">
        </childnode>
        <childnode refid="6005" relation="include">
        </childnode>
        <childnode refid="6006" relation="include">
        </childnode>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
        <childnode refid="6009" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
        <childnode refid="6012" relation="include">
        </childnode>
        <childnode refid="6013" relation="include">
        </childnode>
        <childnode refid="6014" relation="include">
        </childnode>
        <childnode refid="6015" relation="include">
        </childnode>
        <childnode refid="6016" relation="include">
        </childnode>
        <childnode refid="6017" relation="include">
        </childnode>
        <childnode refid="6018" relation="include">
        </childnode>
        <childnode refid="6019" relation="include">
        </childnode>
        <childnode refid="6020" relation="include">
        </childnode>
        <childnode refid="5998" relation="include">
        </childnode>
        <childnode refid="6021" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
      </node>
      <node id="5991">
        <label>simulation_api/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="5992" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesimulation__api">simulation_api</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/traffic_lights/traffic_light_manager.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_api/entity/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesimulation__api" kindref="compound">simulation_api</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal">TrafficLightManager::TrafficLightManager(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;hdmap_utils::HdMapUtils&gt;<sp/>&amp;<sp/>hdmap_utils_ptr,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;visualization_msgs::msg::MarkerArray&gt;::SharedPtr<sp/>publisher,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;rclcpp::Clock&gt;<sp/>&amp;<sp/>clock_ptr,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>map_frame)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">:<sp/>marker_pub_(publisher),<sp/>clock_ptr_(clock_ptr),<sp/>map_frame_(map_frame)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>traffic_lights_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ids<sp/>=<sp/>hdmap_utils_ptr-&gt;getTrafficLightIds();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>ids)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;TrafficLight&gt;<sp/>light_ptr<sp/>=<sp/>std::make_shared&lt;TrafficLight&gt;(id);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>red_position<sp/>=<sp/>hdmap_utils_ptr-&gt;getTrafficLightBulbPosition(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(red_position)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>light_ptr-&gt;setPosition(TrafficLightColor::RED,<sp/>red_position.get());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>yellow_position<sp/>=<sp/>hdmap_utils_ptr-&gt;getTrafficLightBulbPosition(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TrafficLightColor::YELLOW);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yellow_position)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>light_ptr-&gt;setPosition(TrafficLightColor::YELLOW,<sp/>yellow_position.get());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>green_position<sp/>=</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr-&gt;getTrafficLightBulbPosition(</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TrafficLightColor::GREEN);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(green_position)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>light_ptr-&gt;setPosition(TrafficLightColor::GREEN,<sp/>green_position.get());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_lights_.insert({id,<sp/>light_ptr});</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>TrafficLightManager::getIds()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="60"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light<sp/>:<sp/>traffic_lights_)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace_back(traffic_light.first);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLightManager::deleteAllMarkers()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::MarkerArray<sp/>msg;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::Marker<sp/>marker;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>marker.action<sp/>=<sp/>marker.DELETEALL;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>msg.markers.push_back(marker);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>marker_pub_-&gt;publish(msg);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLightManager::drawMarkers()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="78"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::MarkerArray<sp/>msg;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>clock_ptr_-&gt;now();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light<sp/>:<sp/>traffic_lights_)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>light.second-&gt;getColor();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>==<sp/>TrafficLightColor::NONE)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visualization_msgs::msg::Marker<sp/>marker;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.header.stamp<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.header.frame_id<sp/>=<sp/>map_frame_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.action<sp/>=<sp/>marker.ADD;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.ns<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bulb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.id<sp/>=<sp/>light.first;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.type<sp/>=<sp/>marker.SPHERE;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.position<sp/>=<sp/>light.second-&gt;getPosition(light.second-&gt;getColor());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.orientation<sp/>=<sp/>geometry_msgs::msg::Quaternion();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.x<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.y<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.z<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>==<sp/>TrafficLightColor::GREEN)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marker.color<sp/>=<sp/>color_utils::makeColorMsg(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>==<sp/>TrafficLightColor::YELLOW)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marker.color<sp/>=<sp/>color_utils::makeColorMsg(</highlight><highlight class="stringliteral">&quot;yellow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>==<sp/>TrafficLightColor::RED)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marker.color<sp/>=<sp/>color_utils::makeColorMsg(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.markers.push_back(marker);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>marker_pub_-&gt;publish(msg);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLightManager::update(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>color_changed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light<sp/>:<sp/>traffic_lights_)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>light.second-&gt;update(step_time);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(light.second-&gt;colorChanged())<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_changed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color_changed)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteAllMarkers();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>drawMarkers();</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">TrafficLightArrow<sp/>TrafficLightManager::getArrow(std::int64_t<sp/>lanelet_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="129"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traffic_lights_.count(lanelet_id)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(</highlight><highlight class="stringliteral">&quot;lanelet<sp/>id<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traffic_lights_.at(lanelet_id)-&gt;getArrow();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">TrafficLightColor<sp/>TrafficLightManager::getColor(std::int64_t<sp/>lanelet_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="137"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traffic_lights_.count(lanelet_id)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>SimulationRuntimeError(</highlight><highlight class="stringliteral">&quot;lanelet<sp/>id<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traffic_lights_.at(lanelet_id)-&gt;getColor();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>simulation_api</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_api/src/traffic_lights/traffic_light_manager.cpp"/>
  </compounddef>
</doxygen>
