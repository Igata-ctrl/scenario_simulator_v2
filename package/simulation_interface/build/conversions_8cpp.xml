<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="conversions_8cpp" kind="file" language="C++">
    <compoundname>conversions.cpp</compoundname>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes refid="conversions_8hpp" local="no">simulation_interface/conversions.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="71">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="74">
        <label>geometry_msgs.pb.h</label>
      </node>
      <node id="98">
        <label>rosgraph_msgs/msg/clock.hpp</label>
      </node>
      <node id="92">
        <label>openscenario_msgs/msg/entity_type.hpp</label>
      </node>
      <node id="84">
        <label>geometry_msgs/msg/twist.hpp</label>
      </node>
      <node id="78">
        <label>builtin_interfaces/msg/duration.hpp</label>
      </node>
      <node id="76">
        <label>rosgraph_msgs.pb.h</label>
      </node>
      <node id="93">
        <label>openscenario_msgs/msg/lanelet_pose.hpp</label>
      </node>
      <node id="87">
        <label>openscenario_msgs/msg/action_status.hpp</label>
      </node>
      <node id="91">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="82">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="75">
        <label>openscenario_msgs.pb.h</label>
      </node>
      <node id="97">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="100">
        <label>string</label>
      </node>
      <node id="96">
        <label>openscenario_msgs/msg/property.hpp</label>
      </node>
      <node id="90">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="79">
        <label>builtin_interfaces/msg/time.hpp</label>
      </node>
      <node id="85">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="88">
        <label>openscenario_msgs/msg/axle.hpp</label>
      </node>
      <node id="89">
        <label>openscenario_msgs/msg/axles.hpp</label>
      </node>
      <node id="81">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="101">
        <label>vector</label>
      </node>
      <node id="73">
        <label>builtin_interfaces.pb.h</label>
      </node>
      <node id="70">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_interface/src/conversions.cpp</label>
        <link refid="conversions_8cpp"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>iostream</label>
      </node>
      <node id="99">
        <label>simulation_interface/constants.hpp</label>
        <link refid="constants_8hpp_source"/>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>geometry_msgs/msg/accel.hpp</label>
      </node>
      <node id="95">
        <label>openscenario_msgs/msg/performance.hpp</label>
      </node>
      <node id="83">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="94">
        <label>openscenario_msgs/msg/pedestrian_parameters.hpp</label>
      </node>
      <node id="72">
        <label>simulation_interface/conversions.hpp</label>
        <link refid="conversions_8hpp_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>simulation_api_schema.pb.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacesimulation__interface">simulation_interface</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;simulation_interface/conversions.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesimulation__interface" kindref="compound">simulation_interface</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Point<sp/>&amp;<sp/>p,<sp/>geometry_msgs::Point<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>proto.set_x(p.x);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>proto.set_y(p.y);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>proto.set_z(p.z);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Point<sp/>&amp;<sp/>proto,<sp/>geometry_msgs::msg::Point<sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>proto.x();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>proto.y();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>proto.z();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Quaternion<sp/>&amp;<sp/>q,<sp/>geometry_msgs::Quaternion<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>proto.set_x(q.x);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>proto.set_y(q.y);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>proto.set_z(q.z);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>proto.set_w(q.w);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Quaternion<sp/>&amp;<sp/>proto,<sp/>geometry_msgs::msg::Quaternion<sp/>&amp;<sp/>q)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>q.x<sp/>=<sp/>proto.x();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>q.y<sp/>=<sp/>proto.y();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>q.z<sp/>=<sp/>proto.z();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>q.w<sp/>=<sp/>proto.w();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>p,<sp/>geometry_msgs::Pose<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>toProto(p.position,<sp/>*proto.mutable_position());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>toProto(p.orientation,<sp/>*proto.mutable_orientation());</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Pose<sp/>&amp;<sp/>proto,<sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>toMsg(proto.position(),<sp/>p.position);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>toMsg(proto.orientation(),<sp/>p.orientation);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Vector3<sp/>&amp;<sp/>v,<sp/>geometry_msgs::Vector3<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>proto.set_x(v.x);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>proto.set_y(v.y);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>proto.set_z(v.z);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Vector3<sp/>&amp;<sp/>proto,<sp/>geometry_msgs::msg::Vector3<sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>v.x<sp/>=<sp/>proto.x();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>v.y<sp/>=<sp/>proto.y();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>v.z<sp/>=<sp/>proto.z();</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Twist<sp/>&amp;<sp/>t,<sp/>geometry_msgs::Twist<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>toProto(t.linear,<sp/>*proto.mutable_linear());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>toProto(t.angular,<sp/>*proto.mutable_angular());</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Twist<sp/>&amp;<sp/>proto,<sp/>geometry_msgs::msg::Twist<sp/>&amp;<sp/>t)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>toMsg(proto.linear(),<sp/>t.linear);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>toMsg(proto.angular(),<sp/>t.angular);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Accel<sp/>&amp;<sp/>a,<sp/>geometry_msgs::Accel<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>toProto(a.linear,<sp/>*proto.mutable_linear());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>toProto(a.angular,<sp/>*proto.mutable_angular());</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::Accel<sp/>&amp;<sp/>proto,<sp/>geometry_msgs::msg::Accel<sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>toMsg(proto.linear(),<sp/>a.linear);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>toMsg(proto.angular(),<sp/>a.angular);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::BoundingBox<sp/>&amp;<sp/>box,<sp/>openscenario_msgs::BoundingBox<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>toProto(box.center,<sp/>*proto.mutable_center());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>toProto(box.dimensions,<sp/>*proto.mutable_dimensions());</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::BoundingBox<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::BoundingBox<sp/>&amp;<sp/>box)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>toMsg(proto.center(),<sp/>box.center);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>toMsg(proto.dimensions(),<sp/>box.dimensions);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::Performance<sp/>&amp;<sp/>performance,<sp/>openscenario_msgs::Performance<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>proto.set_max_acceleration(performance.max_acceleration);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>proto.set_max_deceleration(performance.max_deceleration);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>proto.set_max_speed(performance.max_speed);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::Performance<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::Performance<sp/>&amp;<sp/>performance)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>performance.max_acceleration<sp/>=<sp/>proto.max_acceleration();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>performance.max_deceleration<sp/>=<sp/>proto.max_deceleration();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>performance.max_speed<sp/>=<sp/>proto.max_speed();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::Axle<sp/>&amp;<sp/>axle,<sp/>openscenario_msgs::Axle<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>proto.set_position_x(axle.position_x);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>proto.set_position_z(axle.position_z);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>proto.set_track_width(axle.track_width);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>proto.set_wheel_diameter(axle.wheel_diameter);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>proto.set_max_steering(axle.max_steering);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::Axle<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::Axle<sp/>&amp;<sp/>axle)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>axle.position_x<sp/>=<sp/>proto.position_x();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>axle.position_z<sp/>=<sp/>proto.position_z();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>axle.track_width<sp/>=<sp/>proto.track_width();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>axle.wheel_diameter<sp/>=<sp/>proto.wheel_diameter();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>axle.max_steering<sp/>=<sp/>proto.max_steering();</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::Axles<sp/>&amp;<sp/>axles,<sp/>openscenario_msgs::Axles<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>toProto(axles.front_axle,<sp/>*proto.mutable_front_axle());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>toProto(axles.rear_axle,<sp/>*proto.mutable_rear_axle());</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::Axles<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::Axles<sp/>&amp;<sp/>axles)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>toMsg(proto.front_axle(),<sp/>axles.front_axle);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>toMsg(proto.rear_axle(),<sp/>axles.rear_axle);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="162"><highlight class="comment">void<sp/>toProto(</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>const<sp/>openscenario_msgs::msg::Property<sp/>&amp;<sp/>p,</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>openscenario_msgs::Property<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="165"><highlight class="comment">{</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/>//<sp/>proto.set_is_ego(p.is_ego);</highlight></codeline>
<codeline lineno="167"><highlight class="comment">}</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment">void<sp/>toMsg(</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>const<sp/>openscenario_msgs::Property<sp/>&amp;<sp/>proto,</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>openscenario_msgs::msg::Property<sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="172"><highlight class="comment">{</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>//<sp/>p.is_ego<sp/>=<sp/>proto.is_ego();</highlight></codeline>
<codeline lineno="174"><highlight class="comment">}</highlight></codeline>
<codeline lineno="175"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::VehicleParameters<sp/>&amp;<sp/>p,<sp/>openscenario_msgs::VehicleParameters<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>toProto(p.bounding_box,<sp/>*proto.mutable_bounding_box());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>toProto(p.axles,<sp/>*proto.mutable_axles());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>toProto(p.performance,<sp/>*proto.mutable_performance());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>toProto(p.property,<sp/>*proto.mutable_property());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>proto.set_name(p.name);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>proto.set_vehicle_category(p.vehicle_category);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::VehicleParameters<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::VehicleParameters<sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>toMsg(proto.axles(),<sp/>p.axles);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>toMsg(proto.bounding_box(),<sp/>p.bounding_box);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>toMsg(proto.performance(),<sp/>p.performance);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>toMsg(proto.property(),<sp/>p.property);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>p.name<sp/>=<sp/>proto.name();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>p.vehicle_category<sp/>=<sp/>proto.vehicle_category();</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::PedestrianParameters<sp/>&amp;<sp/>p,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>openscenario_msgs::PedestrianParameters<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>toProto(p.bounding_box,<sp/>*proto.mutable_bounding_box());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>proto.set_name(p.name);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>proto.set_pedestrian_category(p.pedestrian_category);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::PedestrianParameters<sp/>&amp;<sp/>proto,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::PedestrianParameters<sp/>&amp;<sp/>p)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>p.name<sp/>=<sp/>proto.name();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>p.pedestrian_category<sp/>=<sp/>proto.pedestrian_category();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>toMsg(proto.bounding_box(),<sp/>p.bounding_box);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::ActionStatus<sp/>&amp;<sp/>s,<sp/>openscenario_msgs::ActionStatus<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>proto.set_current_action(s.current_action);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>toProto(s.twist,<sp/>*proto.mutable_twist());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>toProto(s.accel,<sp/>*proto.mutable_accel());</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::ActionStatus<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::ActionStatus<sp/>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>s.current_action<sp/>=<sp/>proto.current_action();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>toMsg(proto.twist(),<sp/>s.twist);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>toMsg(proto.accel(),<sp/>s.accel);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>pose,<sp/>openscenario_msgs::LaneletPose<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>proto.set_lanelet_id(pose.lanelet_id);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>proto.set_s(pose.s);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>proto.set_offset(pose.offset);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>toProto(pose.rpy,<sp/>*proto.mutable_rpy());</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::LaneletPose<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>pose)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>pose.lanelet_id<sp/>=<sp/>proto.lanelet_id();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>pose.s<sp/>=<sp/>proto.s();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>pose.offset<sp/>=<sp/>proto.offset();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>toMsg(proto.rpy(),<sp/>pose.rpy);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType<sp/>&amp;<sp/>type,<sp/>openscenario_msgs::EntityType<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.type<sp/>==<sp/>openscenario_msgs::msg::EntityType::EGO)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>proto<sp/>=<sp/>openscenario_msgs::EntityType::EGO;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.type<sp/>==<sp/>openscenario_msgs::msg::EntityType::VEHICLE)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>proto<sp/>=<sp/>openscenario_msgs::EntityType::VEHICLE;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type.type<sp/>==<sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>proto<sp/>=<sp/>openscenario_msgs::EntityType::PEDESTRIAN;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type<sp/>of<sp/>the<sp/>Entity<sp/>Type<sp/>is<sp/>invalid!\ntype<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(type.type);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>THROW_SIMULATION_ERROR(message);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::EntityType<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::EntityType<sp/>&amp;<sp/>type)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto<sp/>==<sp/>openscenario_msgs::EntityType::EGO)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::EGO;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto<sp/>==<sp/>openscenario_msgs::EntityType::VEHICLE)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::VEHICLE;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto<sp/>==<sp/>openscenario_msgs::EntityType::PEDESTRIAN)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>type.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;type<sp/>of<sp/>the<sp/>Entity<sp/>Type<sp/>is<sp/>invalid!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>THROW_SIMULATION_ERROR(message);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus<sp/>&amp;<sp/>status,<sp/>openscenario_msgs::EntityStatus<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>openscenario_msgs::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>toProto(status.type,<sp/>type);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>proto.set_type(type);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>proto.set_time(status.time);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>proto.set_name(status.name);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>toProto(status.bounding_box,<sp/>*proto.mutable_bounding_box());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>toProto(status.action_status,<sp/>*proto.mutable_action_status());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>toProto(status.pose,<sp/>*proto.mutable_pose());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>toProto(status.lanelet_pose,<sp/>*proto.mutable_lanelet_pose());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>proto.set_lanelet_pose_valid(status.lanelet_pose_valid);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::EntityStatus<sp/>&amp;<sp/>proto,<sp/>openscenario_msgs::msg::EntityStatus<sp/>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityType<sp/>type;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>toMsg(proto.type(),<sp/>type);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>status.type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>status.time<sp/>=<sp/>proto.time();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>status.name<sp/>=<sp/>proto.name();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>toMsg(proto.bounding_box(),<sp/>status.bounding_box);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>toMsg(proto.action_status(),<sp/>status.action_status);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>toMsg(proto.pose(),<sp/>status.pose);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>toMsg(proto.lanelet_pose(),<sp/>status.lanelet_pose);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>status.lanelet_pose_valid<sp/>=<sp/>proto.lanelet_pose_valid();</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>builtin_interfaces::msg::Duration<sp/>&amp;<sp/>duration,<sp/>builtin_interfaces::Duration<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>proto.set_sec(duration.sec);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>proto.set_nanosec(duration.nanosec);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>builtin_interfaces::Duration<sp/>&amp;<sp/>proto,<sp/>builtin_interfaces::msg::Duration<sp/>&amp;<sp/>duration)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>duration.sec<sp/>=<sp/>proto.sec();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>duration.nanosec<sp/>=<sp/>proto.nanosec();</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>builtin_interfaces::msg::Time<sp/>&amp;<sp/>time,<sp/>builtin_interfaces::Time<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>proto.set_sec(time.sec);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>proto.set_nanosec(time.nanosec);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>builtin_interfaces::Time<sp/>&amp;<sp/>proto,<sp/>builtin_interfaces::msg::Time<sp/>&amp;<sp/>time)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>time.sec<sp/>=<sp/>proto.sec();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>time.nanosec<sp/>=<sp/>proto.nanosec();</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toProto(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rosgraph_msgs::msg::Clock<sp/>&amp;<sp/>clock,<sp/>rosgraph_msgs::Clock<sp/>&amp;<sp/>proto)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>toProto(clock.clock,<sp/>*proto.mutable_clock());</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toMsg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rosgraph_msgs::Clock<sp/>&amp;<sp/>proto,<sp/>rosgraph_msgs::msg::Clock<sp/>&amp;<sp/>clock)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>toMsg(proto.clock(),<sp/>clock.clock);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>simulation_interface</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/simulation_interface/src/conversions.cpp"/>
  </compounddef>
</doxygen>
