<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="traffic__light_8cpp" kind="file" language="C++">
    <compoundname>traffic_light.cpp</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes refid="color__utils_8hpp" local="no">traffic_simulator/color_utils/color_utils.hpp</includes>
    <includes refid="exception_8hpp" local="no">traffic_simulator/entity/exception.hpp</includes>
    <includes refid="traffic__light_8hpp" local="no">traffic_simulator/traffic_lights/traffic_light.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="5982">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
      </node>
      <node id="5939">
        <label>limits</label>
      </node>
      <node id="5967">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="5945">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="5966">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="5959">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="5950">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="5939" relation="include">
        </childnode>
        <childnode refid="5946" relation="include">
        </childnode>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5981" relation="include">
        </childnode>
      </node>
      <node id="5946">
        <label>traffic_simulator/entity/exception.hpp</label>
        <link refid="exception_8hpp_source"/>
        <childnode refid="5947" relation="include">
        </childnode>
        <childnode refid="5940" relation="include">
        </childnode>
      </node>
      <node id="5954">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="5972">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="5977">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="5938">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/traffic_lights/traffic_light.cpp</label>
        <link refid="traffic__light_8cpp"/>
        <childnode refid="5939" relation="include">
        </childnode>
        <childnode refid="5940" relation="include">
        </childnode>
        <childnode refid="5941" relation="include">
        </childnode>
        <childnode refid="5946" relation="include">
        </childnode>
        <childnode refid="5948" relation="include">
        </childnode>
        <childnode refid="5983" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5981" relation="include">
        </childnode>
      </node>
      <node id="5943">
        <label>cassert</label>
      </node>
      <node id="5979">
        <label>openscenario_msgs/msg/hermite_curve.hpp</label>
      </node>
      <node id="5940">
        <label>string</label>
      </node>
      <node id="5970">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="5944">
        <label>map</label>
      </node>
      <node id="5974">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="5975" relation="include">
        </childnode>
        <childnode refid="5965" relation="include">
        </childnode>
        <childnode refid="5976" relation="include">
        </childnode>
        <childnode refid="5977" relation="include">
        </childnode>
        <childnode refid="5978" relation="include">
        </childnode>
        <childnode refid="5979" relation="include">
        </childnode>
        <childnode refid="5980" relation="include">
        </childnode>
        <childnode refid="5981" relation="include">
        </childnode>
      </node>
      <node id="5941">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="5942" relation="include">
        </childnode>
        <childnode refid="5943" relation="include">
        </childnode>
        <childnode refid="5944" relation="include">
        </childnode>
        <childnode refid="5945" relation="include">
        </childnode>
        <childnode refid="5940" relation="include">
        </childnode>
      </node>
      <node id="5973">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="5958">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="5963">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="5951">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5953" relation="include">
        </childnode>
        <childnode refid="5954" relation="include">
        </childnode>
        <childnode refid="5955" relation="include">
        </childnode>
        <childnode refid="5956" relation="include">
        </childnode>
        <childnode refid="5957" relation="include">
        </childnode>
        <childnode refid="5958" relation="include">
        </childnode>
        <childnode refid="5959" relation="include">
        </childnode>
        <childnode refid="5960" relation="include">
        </childnode>
        <childnode refid="5961" relation="include">
        </childnode>
        <childnode refid="5962" relation="include">
        </childnode>
        <childnode refid="5963" relation="include">
        </childnode>
        <childnode refid="5964" relation="include">
        </childnode>
        <childnode refid="5965" relation="include">
        </childnode>
        <childnode refid="5966" relation="include">
        </childnode>
        <childnode refid="5967" relation="include">
        </childnode>
        <childnode refid="5968" relation="include">
        </childnode>
        <childnode refid="5969" relation="include">
        </childnode>
        <childnode refid="5970" relation="include">
        </childnode>
        <childnode refid="5944" relation="include">
        </childnode>
        <childnode refid="5971" relation="include">
        </childnode>
        <childnode refid="5972" relation="include">
        </childnode>
        <childnode refid="5973" relation="include">
        </childnode>
        <childnode refid="5940" relation="include">
        </childnode>
        <childnode refid="5974" relation="include">
        </childnode>
        <childnode refid="5982" relation="include">
        </childnode>
        <childnode refid="5983" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5981" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
      </node>
      <node id="5947">
        <label>exception</label>
      </node>
      <node id="5952">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="5978">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="5957">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="5969">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="5975">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="5968">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="5976">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="5981">
        <label>vector</label>
      </node>
      <node id="5984">
        <label>utility</label>
      </node>
      <node id="5980">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="5981" relation="include">
        </childnode>
      </node>
      <node id="5961">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="5956">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="5949">
        <label>iostream</label>
      </node>
      <node id="5953">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="5983">
        <label>unordered_map</label>
      </node>
      <node id="5948">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="5949" relation="include">
        </childnode>
        <childnode refid="5939" relation="include">
        </childnode>
        <childnode refid="5941" relation="include">
        </childnode>
        <childnode refid="5946" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5982" relation="include">
        </childnode>
        <childnode refid="5983" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5981" relation="include">
        </childnode>
      </node>
      <node id="5964">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="5985">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="5955">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="5960">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="5965">
        <label>boost/optional.hpp</label>
      </node>
      <node id="5962">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="5942">
        <label>stdio.h</label>
      </node>
      <node id="5971">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/color_utils/color_utils.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/entity/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/traffic_lights/traffic_light.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal">TrafficLight::TrafficLight(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::int64_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;TrafficLightColor,<sp/>geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>color_positions,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;TrafficLightArrow,<sp/>geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>arrow_positions)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">:<sp/>id(id),<sp/>color_positions_(color_positions),<sp/>arrow_positions_(arrow_positions)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>color_changed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>color_phase_.setState(TrafficLightColor::NONE);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>arrow_changed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>arrow_phase_.setState(TrafficLightArrow::NONE);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLight::setPosition(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrafficLightColor<sp/>&amp;<sp/>color,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Point<sp/>&amp;<sp/>position)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>color_positions_.insert({color,<sp/>position});</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLight::setColorPhase(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;double,<sp/>TrafficLightColor&gt;&gt;<sp/>&amp;<sp/>phase,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_offset)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>color_phase_.setPhase(phase,<sp/>time_offset);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLight::setArrowPhase(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;double,<sp/>TrafficLightArrow&gt;&gt;<sp/>&amp;<sp/>phase,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_offset)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>arrow_phase_.setPhase(phase,<sp/>time_offset);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLight::setColor(TrafficLightColor<sp/>color)<sp/>{<sp/>color_phase_.setState(color);<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLight::setArrow(TrafficLightArrow<sp/>arrow)<sp/>{<sp/>arrow_phase_.setState(arrow);<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TrafficLight::getColorPhaseLength()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color_phase_.getPhaseLength();<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TrafficLight::getArrowPhaseLength()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arrow_phase_.getPhaseLength();<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">TrafficLightArrow<sp/>TrafficLight::getArrow()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arrow_phase_.getState();<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">TrafficLightColor<sp/>TrafficLight::getColor()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color_phase_.getState();<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrafficLight::colorChanged()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color_changed_;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrafficLight::arrowChanged()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arrow_changed_;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLight::update(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>previous_arrow<sp/>=<sp/>getArrow();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>arrow_phase_.update(step_time);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow<sp/>=<sp/>getArrow();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous_arrow<sp/>==<sp/>arrow)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>arrow_changed_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>arrow_changed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>previous_color<sp/>=<sp/>getColor();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>color_phase_.update(step_time);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>getColor();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous_color<sp/>==<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>color_changed_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>color_changed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Point<sp/>TrafficLight::getPosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrafficLightColor<sp/>&amp;<sp/>color)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color_positions_.count(color)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtraffic__simulator_1_1SimulationRuntimeError" kindref="compound">traffic_simulator::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;target<sp/>color<sp/>does<sp/>not<sp/>exists&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color_positions_.at(color);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Point<sp/>TrafficLight::getPosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrafficLightArrow<sp/>&amp;<sp/>arrow)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arrow_positions_.count(arrow)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classtraffic__simulator_1_1SimulationRuntimeError" kindref="compound">traffic_simulator::SimulationRuntimeError</ref>(</highlight><highlight class="stringliteral">&quot;target<sp/>arrow<sp/>does<sp/>not<sp/>exists&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arrow_positions_.at(arrow);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/traffic_lights/traffic_light.cpp"/>
  </compounddef>
</doxygen>
